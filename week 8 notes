Week 8 PHP Forms and Web Interaction
------------------------------------

HTML Forms
----------

- when parameters are sent through url, can be accessed
by global super array "_GET"

e.g. http://.....com/index.html?x=5

can access x in above url in PHP using _GET

Forms - User Input / Action
---------------------------

- contains set of fields with keys, user fills in form fields
and submits with submit button, submitting key/value pairs from form as part of http request

e.g.

<form>
	<p><laber for="guess">Input Guess</label>
	<input type="text" name="guess" id="guess"></p>
	<input type="submit">
</form>

using GET and POST with forms
-----------------------------

- another global super array _POST can be used to access data from
POST request

<form method="post"> ---> sends form as post request

GET - Parameters are placed on URL which is retrieved
POST - URL is retrieved and parameters are appended to request in the HTTP connection

Passing Parameters to the Server
--------------------------------

Browser ----[HTTP Request]----> Web Server

GET /form1.php?guess=42
Accept : text/html
User-Agent: Lynx/2.4 libwww/2.14

POST /form3.php
Accept: text/html
User-agent: Lynx/2.4 libwww/2.14
Content-type: application/x-www-form-urlencoded
Content-length: 13

guess=42

- in POST request, parameters are part of connection, not url

rules of POST/GET choice
------------------------

- POST is used when data is being created or modified
- GET is used when you are reading or searching things

e.g.

GET ---> searching for part by part ID on car website
(want parameters in URL so you can bookmark page of certain part and always go there)

POST ---> withdrawing 100 dollars using online banking
(DON'T want parameters in URL or else will withdraw 100 dollars every time you go to url including parameters in string)

- web search spdiers will follow GET URLs but generally not POST URLs

- GET URLs should be idempotent, same URL should give "same thing" each time you access it

- GET has an upper limit of number of bytes of parameters and values (think about 2k)

HTML Input Types
----------------

- SELECT tag, allows for form field where user can select from an assortment of dropdown OPTION tags

- input type="radio" radio buttons, can give multiple radio buttons same name, and when user selects one, deselects all others

- input type="checkbox", checkbox form field

- textarea form field, takes "rows" and "cols" fields and is a text box which is submitted as string to server

- SELECT multiple="multiple" tag, allows for select tag where multiple options can be selected by user

NEW HTML Input Types
--------------------

- input type="color"
- input type="date"
- input type="email"
- input type="number" adds range and arrow to go up/down for number value
- input type="url" 

Processing form data and HTML Injection
---------------------------------------

Persisting form data
--------------------

- when we submit forms and there is an error, we just expect data will remain in form when page is redisplayed
- application needs to make sure to put previous values back in form

<?php
	$oldguess = isset($_POST['guess']) ? $_POST['guess'] : '';
?>

<p>Guessing game...</p>
<form method="post">
	<p><label for="guess">Input Guess</label>
	<input type="text" name="guess" id="guess"
		size="40" value"<?= $oldguess ?>"/></p>
	<input type="submit"/>
</form>

in above code, when form is submitted and error occurs, php code at top will save old guess from form if a guess was submitted, and then this value $oldguess is "echoed" into HTML using shorthand

<?= $oldguess ?> -----> <?php echo($oldguess); ?>

- HOWEVER, above code is a prime example of a form which can be subject to an HTML Injection

e.g.

if guess submitted by user is following HTML:

"><b>DIE DIE DIE</b>

"> will terminate form field, and rest of HTML will appear on the actual page

- this is a trivial example of HTML injection, normally used to execute dangerous code (e.g. stealing CC info, hacking or damaging page/resources etc.)

- browser won't know what HTML came from form field and what came from code, will then interpret it incorrectly as a result

To The Rescue: htmlentities()
-----------------------------

<? htmlentities($oldguess) ?>

- &lt &amp etc. are html entities
- when parsing form field using htmlentities(), converts all characters which can be represented as htmlentities and prints them as such

"><b>DIE DIE DIE</b> ---> "&quot;%gt;%lt;b&gt;DIE DIE DIE&lt;/b&gt;"

Guessing Game - In-server Data Validation
-----------------------------------------

- after data has successfully been sent from form to web server through HTTP request, need to make sure data being sent by user was "safe" to be accessed/processed

Incoming Data Validation
------------------------

- making sure all user data is present and correct format before proceeding
	- non-empty strlen($var) > 0
	- a number is_numeric($var)
	- an email address strpos($var,'@') > 0
	- or filter_var($var, FILTER_VALIDATE_EMAIL) != false
		(see filter_var in PHP docs)

Model View Controller (MVC)
---------------------------

- programming pattern which breaks request/response cycle into three separate operations

basic MVC definition
--------------------

- a model that defines elements of a web application and how they interact

- View: produces output
- Model: handles data
- Controller: orchestration/routing

	-[MODEL]<---manipulates--[controller]
	|							    / \
   updates				 		     |
   	|							    uses
   	|					 		     |
  	----->[VIEW]<--sees--->[USER]----|

Pattern: Processing POST data
-----------------------------

- many patterns for handling POST data
- no "rules", just suggestions
- "frameworks" are just different interpretations of MVC

one option:

1. completely process incoming data (if any) - produce no output (model)
2. produce page output (view)

example below

<?php
	$oldguess = '';
	$message = false;
	if(isset($_POST['guess'])){
		$oldguess = $_POST['guess'] + 0;
		if( $oldguess == 42){
			$message = "correct";
		} else if( $oldguess > 42 ){
			$message = "too high";
		} else {
			$message = "too low";
		}
	}
?>

above is MODEL

<html>
<head>
	<title>A guessing game</title>
</head>
<body style="font-family: sans-serif;">
<p>guessing game....</p>
<?php
	if($message !== false){
		echo("<p>$message</p>\n");
	}
?>
<form method="post">
	<p><label for="guess">Input Guess</label>
	<input type="text" name="guess" id="guess" size="40"
		value="<?"= htmlentities($oldguess) ?>"/></p>
	<input type="submit" />
</form>
</body>

above is VIEW

both parts together form CONTROLLER

simple rules:

- no HTML created in model
- no Database interaction in view

- above are not required, but are good convention

$_REQUEST array merges data from $_GET and $_POST
